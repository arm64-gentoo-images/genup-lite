#!/bin/bash
#
# Update portage tree and eix, then bring all packages in @world up-to-date.
# Clean up at the end, ensuring changes to files in /etc are processed.
# Unlike genup, does not attempt to upgrade the kernel.
# Intended to be run interactively.
#
# Copyright (c) 2015 sakaki <sakaki@deciban.com>
#
# License (GPL v3.0)
# ------------------
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

set -e
set -u

# Scroll to the bottom of this script to follow the main program flow.

# ********************** variables ********************* 
PROGNAME="$(basename "${0}")"
VERSION="1.0.1"
ETCPROFILE="/etc/profile"
RED_TEXT="" GREEN_TEXT="" YELLOW_TEXT="" RESET_ATTS=""
if [[ -v TERM && -n "${TERM}" && "${TERM}" != "dumb" ]]; then
    RED_TEXT="$(tput setaf 1)$(tput bold)"
    GREEN_TEXT="$(tput setaf 2)$(tput bold)"
    YELLOW_TEXT="$(tput setaf 3)$(tput bold)"
    RESET_ATTS="$(tput sgr0)"
fi
declare -i VERBOSITY=1
PREFIXSTRING="* "
SHOWPREFIX="${GREEN_TEXT}${PREFIXSTRING}${RESET_ATTS}"
SHOWSUFFIX=""
VERBOSITYFLAG=""
ASKFLAG=""
EMERGEARGS=""
EIXSYNCARGS=""
PUMP=""
NOPUMP="FEATURES='-distcc -distcc-pump'"
# following should already be in the environment; but to be safe...
export NUMCPUS=$(grep -E 'processor\s+:' /proc/cpuinfo | wc -l)
export NUMCPUSPLUSONE=$(( NUMCPUS + 1 ))
export MAKEOPTS="${MAKEOPTS--j${NUMCPUSPLUSONE} -l${NUMCPUS}}"
export EMERGE_DEFAULT_OPTS="${EMERGE_DEFAULT_OPTS---jobs=${NUMCPUSPLUSONE} --load-average=${NUMCPUS}}"
declare -i NEEDSDISPATCHCONF=0
# program arguments (booleans in this case)
declare -i ARG_ASK=0 ARG_HELP=0
declare -i ARG_VERBOSE=0 ARG_VERSION=0 ARG_DISPATCHCONF=0
declare -i ARG_KEEP_OLD_DISTFILES=0
declare -i ARG_NO_PERL_CLEANER=0 ARG_NO_PYTHON_UPDATER=0

# ***************** various functions ****************** 
cleanup_and_exit_with_code() {
    # add any cleanup code here
    trap - EXIT
    exit $1
}
show() {
    local MESSAGE=${1:-""}
    local VERBLEVEL=${2:-${VERBOSITY}}
    if (( VERBLEVEL >=1 )); then
        echo -e "${SHOWPREFIX}${MESSAGE}${SHOWSUFFIX}"
    fi
}
warning() {
    echo -e "${YELLOW_TEXT}${PREFIXSTRING}${RESET_ATTS}${PROGNAME}: Warning: ${1}" >&2
}
die() {
    echo
    echo -e "${RED_TEXT}${PREFIXSTRING}${RESET_ATTS}${PROGNAME}: Error: ${1} - exiting" >&2
    cleanup_and_exit_with_code 1
}
trap_cleanup() {
    trap - SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT
    die "Caught signal"
}
trap trap_cleanup SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT
test_yn() {
    echo -n -e "${SHOWPREFIX}${1} (y/n)? ${SHOWSUFFIX}"
    read -r -n 1
    echo
    if [[ ${REPLY} =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}
continue_yn() {
    if ! test_yn "${1}"; then
        echo -e "${RED_TEXT}${PREFIXSTRING}${RESET_ATTS}Quitting" >&2
        cleanup_and_exit_with_code 1
    fi
}
suppress_colours() {
    RED_TEXT=""
    GREEN_TEXT=""
    YELLOW_TEXT=""
    RESET_ATTS=""
    SHOWPREFIX="${PREFIXSTRING}"
}
suppress_colour_if_output_not_to_a_terminal() {
    if [ ! -t 1 -o ! -t 2 ]; then
        # we are going to a non-terminal
        suppress_colours
    fi
}
check_gcc_config_and_reset_if_necessary() {
    # check if gcc-config exists with an error - if it does, then
    # attempt to set one based on the current gcc version number
    if ! gcc-config --get-current-profile >/dev/null 2>&1; then
        # unset or invalid, attempt to force this to the current gcc
        # version
        local GCC_VERSION="$(gcc --version | head -n 1 | sed 's/^.* //')"
        if gcc-config "${GCC_VERSION}"; then
            warning "gcc configuration was reset"
            if [ -s "${ETCPROFILE}" ]; then
                set +e
                set +u
                source "${ETCPROFILE}"
                set -e
                set -u
            fi
        else
            die "failed to set gcc configuration"
        fi
    fi
}
display_greeting() {
    show "Gentoo System Updater v${VERSION}"
}
update_portage_tree_and_sync_eix() {
    show "Updating Portage tree and syncing the eix cache"
    show "(this may take some time)..."
    # do this quietly, to avoid flooding the logs / screen
    eix-sync -q ${EIXSYNCARGS}
}
remove_any_prior_emerge_resume_history() {
    # as if we call emerge --resume later, we don't want any hangovers from the
    # previous invocation
    show "Removing any prior emerge history..."
    emaint --fix cleanresume
}
ensure_portage_itself_is_up_to_date() {
    show "Bringing Portage itself up to date..."
    emerge ${VERBOSITYFLAG} --oneshot --update portage
}
update_all_packages_in_world_set_and_dependencies() {
    # performs deep dependency tree update, including build-time dependencies
    # will update any package whose use flags have changed
    # the @world set includes the @system set
    # will not re-emerge packages that are already up-to-date
    declare -i RC
    show "Updating @world set (for new versions, or changed use flags)..."
    
    if ! ${PUMP} emerge ${ASKFLAG} ${VERBOSITYFLAG} ${EMERGEARGS} --deep \
        --with-bdeps=y --newuse --update --backtrack=50 @world; then
        # per make manpage, if multiple "j" opts are specified, the last
        # one takes precedence, so this is legitimate
        if MAKEOPTS="${MAKEOPTS-} -j1" ${NOPUMP} emerge --resume; then
            warning "emerge completed successfully, but only by restricting"
            warning "build parallelism and distcc"
        else
            # we still have a problem, allow the user to attempt to fix if
            # running interactively
            if ((ARG_ASK==1)); then
                warning "emerge did not complete successfully"
                show "You can try to fix the problem in another console, then return here"
                show "and resume the emerge"
                continue_yn "Attempt to resume the emerge now"
                MAKEOPTS="${MAKEOPTS-} -j1" emerge --resume
            else
                die "Failed to complete the emerge due to error"
            fi
        fi
    fi
}
rebuild_external_modules_if_necessary() {
    show "Creating any necessary external modules (e.g., VirtualBox)..."
    if ! ${PUMP} emerge ${VERBOSITYFLAG} @module-rebuild; then
        if MAKEOPTS="${MAKEOPTS-} -j1" ${NOPUMP} emerge --resume; then
            warning "emerge @module-rebuild completed successfully, but only by restricting"
            warning "build parallelism"
        else
            warning "Failed to complete emerge @module-rebuild due to error"
            warning "Continuing..."
        fi
    fi
}
rebuild_packages_depending_on_stale_libraries() {
    # when a shared library gets updated, and its soname is changed
    # all its consumers are not automatically rebuilt; assuming (the default)
    # that the preserve-libs feature is set, Portage will keep the old
    # library around (so that the application depending on it will keep working)
    # the below emerge will rebuild any such consumers, so that the old
    # library may be freed
    show "Rebuilding any consumers of old shared libraries, which did not autoupdate..."
    if ! ${PUMP} emerge ${VERBOSITYFLAG} @preserved-rebuild; then
        if MAKEOPTS="${MAKEOPTS-} -j1" ${NOPUMP} emerge --resume; then
            warning "emerge @preserved-rebuild completed successfully, but only by restricting"
            warning "build parallelism"
        else
            die "Failed to complete emerge @preserved-rebuild due to error"
        fi
    fi
}
bring_old_perl_modules_up_to_date() {
    # perl modules are built for a particular perl target, but are *not*
    # automatically rebuilt when perl upgrades to a higher version - the
    # below script fixes this
    if ((ARG_NO_PERL_CLEANER==0)); then
        show "Ensuring perl modules are matched to current version of perl..."
        perl-cleaner ${VERBOSITYFLAG} --all
    fi
}
bring_old_python_modules_up_to_date() {
    # find and rebuild any packages that may have been broken due to a Python
    # upgrade
    if ((ARG_NO_PYTHON_UPDATER==0)); then
        show "Ensuring all packages consistent with current python version..."
        python-updater ${VERBOSITYFLAG}
    fi
}
check_if_dispatch_conf_needs_to_be_run() {
    # check if the user has any configuration file changes pending review
    # by dispatch-conf, and set the NEEDSDISPATCHCONF variable accordingly
    # we do a rough check to see if there are any pending changes
    local DIRS_TO_CHECK="$(emerge --info | grep '^CONFIG_PROTECT=' | cut -d"\"" -f2)"
    local PENDING_CHANGES="$(find ${DIRS_TO_CHECK} -name '*._cfg*' -type f -print)"
    if [ -n "${PENDING_CHANGES}" ]; then
        NEEDSDISPATCHCONF=1
    else
        NEEDSDISPATCHCONF=0
    fi
}
interactively_resolve_clashing_config_file_changes() {
    # where user has changed an e.g. /etc/ file overwritten by a package
    # update, invoke an interactive tool allowing them to resolve the issue
    # only available in interactive mode...
    check_if_dispatch_conf_needs_to_be_run
    if ((NEEDSDISPATCHCONF==1)); then
        if ((ARG_ASK==1 || ARG_DISPATCHCONF==1)); then
            show "Handing any updated configuration file clashes..."
            dispatch-conf
            NEEDSDISPATCHCONF=2 # special flag; we'll recheck later
        fi
        # otherwise, user will be warned at end to run dispatch-conf
    else
        show "No configuration files need updating"
    fi
}
purge_old_distfiles_if_desired() {
    # by default, Portage keeps old source tarballs (distfiles) around
    # forever (in /usr/portage/distfiles); the following command, from the
    # gentoolkit package, will get rid of any not related to a currently
    # installed ebuild
    if ((ARG_KEEP_OLD_DISTFILES==0)); then
        show "Purging currently unused source tarballs to save space..."
        eclean ${VERBOSITYFLAG} --deep distfiles
    fi
}
update_environment() {
    # append values in /etc/env.d/... files into /etc/profile.env
    # also create /etc/ld.so.conf, and run ldconfig (to recreate
    # /etc/ld.so.cache)
    env-update
}
remove_unreferenced_packages() {
    # following should be reasonably safe, it removes any packages that are not
    # required by the transitive closure of @world set dependencies
    show "Removing packages not required by @world set..."
    emerge ${ASKFLAG} ${VERBOSITYFLAG} --depclean
    # we may have just blown away our old version of gcc, but not enabled
    # the replacement version's config, so...
    check_gcc_config_and_reset_if_necessary
}
rebuild_where_missing_libraries_detected() {
    # check for missing shared library dependencies (possibly caused by
    # emerge --depclean) and attempt to fix them, by re-emerging the broken
    # libraries and binaries (shouldn't do much nowadays, but good to check!)
    show "Fixing any broken/missing libraries and binaries caused by cleanup..."
    revdep-rebuild 
}
display_final_status() {
    show
    if ((NEEDSDISPATCHCONF==2)); then
        # double-check that the user resolved everything earlier
        check_if_dispatch_conf_needs_to_be_run
    fi
    if ((NEEDSDISPATCHCONF==1)); then
        warning "There are configuration file changes pending review!"
        warning "Please run dispatch-conf to interactively resolve them."
    else
        show "There are no configuration file changes pending review."
    fi
    show "You may now wish to issue:"
    show "  source /etc/profile"
    show "to ensure your current shell environment is fully up-to-date."
    show "Subsequent login shells will automatically pick up any changes."
    show
    show "All done - your system is now up-to-date!"
}
print_usage() {
    cat << EOF
Usage: ${PROGNAME} [options]

Options:
  -a, --ask             turns on interactive mode: you must confirm key actions
  -c, --dispatch-conf   run dispatch-conf, even if in non-interactive mode
  -e, --emerge-args=ARGS
                        pass provided additional ARGS to the main emerge
                        e.g., use --emerge-args='--autounmask-write' to
                        automatically make necessary changes to config files
  -h, --help            show this help message and exit
  -k, --keep-old-distfiles
                        don't purge source tarballs (distfiles) for uninstalled
                        versions of packages (or uninstalled packages)
  -p, --no-perl-cleaner do not attempt to run perl-cleaner
  -P, --no-python-updater
                        do not attept to run python-updater
  -v, --verbose         ask called programs to display more information
  -V, --version         display the version number of ${PROGNAME} and exit
EOF
}
print_help() {
    cat << EOF
${PROGNAME} - update Portage tree, and all installed packages
EOF
    print_usage
}
print_version() {
    printf "%s\n" "${VERSION}"
}
display_usage_message_and_bail_out() {
    print_usage >&2
    cleanup_and_exit_with_code 1
}
check_if_using_webrsync_gpg() {
    # we have to amend the args to eix if using webrsync-gpg feature
    if grep -qi "^FEATURES.*webrsync-gpg.*$" <(emerge --info); then
        # force use of emerge-webrsync instead of emerge --sync
        show "Portage feature webrsync-gpg detected: using -w option with eix-sync"
        EIXSYNCARGS="-w"
    fi
}
check_if_using_distcc() {
    # check for the relevant feature... turn on PUMP prefix if
    # we find it
    if grep -qi "^FEATURES.*distcc-pump.*$" <(emerge --info); then
        # set prefix for emerge in normal situation...
        show "Portage feature distcc-pump detected: will pump emerge"
        PUMP="pump"
    fi
}
process_command_line_options() {
    local TEMP
    declare -i RC
    set +e
        # error trapping off, as we want to handle errors
        TEMP="$(getopt -o ace:hkpPvV --long ask,dispatch-conf,emerge-args:,help,keep-old-distfiles,no-perl-cleaner,no-python-updater,verbose,version -n "${PROGNAME}" -- "${@}")"
        RC="${?}"
    set -e
    if ((RC!=0)); then
        display_usage_message_and_bail_out
    fi
    eval set -- "${TEMP}"

    # extract options and their arguments into variables.
    while true ; do
        case "${1}" in
            -a|--ask) ARG_ASK=1 ; shift ;;
            -c|--dispatch-conf) ARG_DISPATCHCONF=1 ; shift ;;
            -e|--emerge-args)
                case "${2}" in
                    "") shift 2 ;;
                    *) EMERGEARGS="${2}" ; shift 2 ;;
                esac ;;
            -h|--help) ARG_HELP=1 ; shift ;;
            -k|--keep-old-distfiles) ARG_KEEP_OLD_DISTFILES=1 ; shift ;;
            -p|--no-perl-cleaner) ARG_NO_PERL_CLEANER=1 ; shift ;;
            -P|--no-python-updater) ARG_NO_PYTHON_UPDATER=1 ; shift ;;
            -v|--verbose) ARG_VERBOSE=1 ; shift ;;
            -V|--version) ARG_VERSION=1 ; shift ;;
            --) shift ; break ;;
            *) die "Internal error!" ;;
        esac
    done
    # process 'perform-then-exit' options
    if ((ARG_HELP==1)); then
        print_help
        cleanup_and_exit_with_code 0
    elif ((ARG_VERSION==1)); then
        print_version
        cleanup_and_exit_with_code 0
    fi
    # set verbosity
    if ((ARG_VERBOSE==1)); then
        VERBOSITY+=1
    fi
    if ((VERBOSITY>1)); then
        VERBOSITYFLAG="--verbose"
    fi
    # set interactive mode
    if ((ARG_ASK==1)); then
        ASKFLAG="--ask"
    fi
}

# *************** start of script proper ***************
suppress_colour_if_output_not_to_a_terminal
process_command_line_options "${@}"
check_if_using_webrsync_gpg
check_if_using_distcc
display_greeting
check_gcc_config_and_reset_if_necessary
update_portage_tree_and_sync_eix
remove_any_prior_emerge_resume_history
ensure_portage_itself_is_up_to_date
update_all_packages_in_world_set_and_dependencies
rebuild_external_modules_if_necessary
rebuild_packages_depending_on_stale_libraries
bring_old_perl_modules_up_to_date
bring_old_python_modules_up_to_date
interactively_resolve_clashing_config_file_changes
remove_unreferenced_packages
rebuild_where_missing_libraries_detected
rebuild_packages_depending_on_stale_libraries
purge_old_distfiles_if_desired
update_environment
display_final_status
cleanup_and_exit_with_code 0
# **************** end of script proper ****************
